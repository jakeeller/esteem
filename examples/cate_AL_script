#!/bin/bash
#SBATCH --partition=compute
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=1
#SBATCH --time=48:00:00
#SBATCH --mem=1000mb
#SBATCH --account=su007-ndmh
#SBATCH --job-name=all_wtr_MACEacu_nohup

export OMP_NUM_THREADS=1
origdir=`pwd`
#module purge; module load GCC/11.3.0 CUDA/11.7.0 OpenMPI/4.1.4 PyTorch/1.12.1-CUDA-11.7.0

# Selection method
M="u"
# All states
TALL=("gs" "es1")
NT=2
TGS=("gs")
# Base of name of script
scrbase="ms"
scr=$scrbase".py"
# Base solute_solvent seed
SM="mg"
SV="wtr"
SA="all_"$SV
# All the seeds we loop over
SALL=($SM"_"$SV $SC"_"$SV $SV"_"$SV)
NS=3
# Trajectory characters, Q=Validation Set, U=Training Set
UALL=("Q" "U")
AALL=("B" "A")
# Number of generations
G=2
# Number of Calculators
C=3
# Number of Configs to run DFT on per cluster job
SMAX=5
# Number of new cluster training configs per generation
NC=90
# Number of new cluster validation configs per generation
NCQ=10
# Method
W="MACE"
# Initial clusters name
IC="solvR2.5"
# MD name
MDSTR="md300"
# Functional in solutes task
FUNC="wB97M-D3BJ"

# write scripts
if false; then
mkscr=$SA"_make_AL_scripts.py"
# import functions for script writing
cat <<EOT > $mkscr
from esteem.active_learning import setup_scripts
from esteem.parallel import make_sbatch
from esteem.wrappers.mace import MACEWrapper
from esteem.parallel import get_default_script_settings
script_settings=get_default_script_settings(MACEWrapper())
EOT
# commands to write scripts for the various seeds and targets
for SP in ${SALL[@]}; do
   for TT in ${TALL[@]}; do
      echo 'setup_scripts("'$scrbase'","'$SP'","'$TT'","'$C'","'$W'ac'$M'","'$W'",script_settings,make_sbatch,"'$SA'")' >> $mkscr
   done
done

python $mkscr
fi

# perform solutes run
if true; then
   for TT in ${TALL[@]}; do # loop over targets
      echo Solutes task for $TT"_"$FUNC
      python $scr scripts ${SALL[0]} $TT"_"$FUNC
      sbatch --wait ${SALL[0]}"_"$TT"_"$FUNC"_solutes_sub" &
   done
   wait
fi

# perform solvate run
if true; then
  python $scr solvate $SP $MDSTR | tee -a $SP"_"$MDSTR"_setup.log"
  for SP in ${SALL[@]}; do # loop over seeds
      echo Solvate task for $SP
      for TT in ${TGS[@]}; do # loop over targets
          cd $SP"_"$MDSTR
          sbatch --wait $SP"_"$MDSTR"_sub" &
          cd $origdir
      done
  done
  wait
fi

# perform initial clusters runs
if true; then
  # run mlclus to set up directory and symlinks for clusters run
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Setup for $SP initial
      for TT in ${TGS[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
	  # run a clus job to setup clusters scripts
	  for UU in ${AALL[@]}; do # loop over B and A
              python $scr mlclus $SP $IC"_"$UU | tee -a $SP"_"$IC"_"$UU"_setup.log"
	  done
      done
  done
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Carve for $SP initial
      for TT in ${TGS[@]}; do # loop over states
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP"_"$IC
          # carve the input trajectory
	  for UU in ${AALL[@]}; do # loop over B and A
              python ../$scr mlclus_setup $SP $IC"_"$UU | tee -a $SP"_"$IC"_"$UU"_mlclus_carve.log"
           done
	  cd $origdir
      done
  done
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Run for $SP initial
      for TT in ${TGS[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP"_"$IC
	  # submit the cluster jobs for B and A
          sbatch --wait --array=0-$((NCQ-1)):$SMAX $SP"_"$IC"_"${AALL[0]}"_sub" &
          sbatch --wait --array=0-$((NC-1)):$SMAX $SP"_"$IC"_"${AALL[1]}"_sub" &
	  cd $origdir
      done
  done
  wait
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Assemble for $SP initial
      for TT in ${TGS[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP$"_"$IC
	  # assemble the completed trajectories
	  for UU in ${AALL[@]}; do
	      python ../$scr mlclus $SP $IC"_"$UU | tee -a $SP"_"$IC"_"$UU"_mlclus_assemble.log"
	  done
          cd $origdir
      done
  done
fi

if true; then
  # setup mltraj folders
  for SP in ${SALL[@]}; do # loop over seeds
      for TT in ${TALL[@]}; do # loop over targets
          echo Setup Trajectories directory for $SP $TT
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
	  X=0 
          python $scr mltraj_setup $SP $TT"_"$W"ac"$X$M"a_mldyn" | tee -a $SP"_"$TT"_"$W"ac"$X$M"a_mltraj_setup.log"
	  # move script and setup log into folder
	  mv $SP"_"$TT"_"$W"ac"$M"_mltraj_sub" $SP"_"$TT"_"$W"ac"$X$M"a_mltraj_setup.log" $SP"_"$TT"_"$W"ac_mldyn"
      done
  done
fi

# loop over iterations
for ((X=0;X<=$G;X++))
do 
  # loop over random seeds
  # restart every 3 iterations, otherwise copy checkpoint files to new names
  if [ $((X%4)) -gt 0 ]; then
     for TT in ${TALL[@]}; do
         for f in $SA"_"$TT"_"$W"ac/checkpoints/"$SA"_"$TT"_"$W"ac"$((X-1))$M*.pt
         do
             cp $f `echo $f | sed 's/ac'$((X-1))'/ac'$X'/g'`
         done
     done
  fi
  # initiate or continue the training
  echo Training Iteration $X for $SA calculators
  for TT in ${TALL[@]}; do # loop over states
      # submit a job for each random seed
      sbatch --wait --array=$((X*10))-$((X*10+C-1)) $SA"_"$TT"_"$W"ac"$M"_mltrain_sub" &
  done
  wait
  # run mltraj with committee of calculators
  for SP in ${SALL[@]}; do # loop over seeds
      echo Trajectories for Generation $X for $SP
      for TT in ${TALL[@]}; do # loop over targets
	  cd $SP"_"$TT"_"$W"ac_mldyn"
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
	  # submit a mltraj job for each random seed
          sbatch --wait --array=$((X*10))-$((X*10+C-1)) $SP"_"$TT"_"$W"ac"$M"_mltraj_sub" &
	  cd $origdir
      done
  done
  wait
  # run mlclus to set up directory and symlinks for clusters run
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Setup for Generation $X for $SP
      for TT in ${TALL[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
	  # run a mlclus job to setup clusters scripts
	  for UU in ${UALL[@]}; do # loop over U and Q
              python $scr mlclus $SP $TT"_"$W"ac"$X$M"_"$UU | tee -a $SP"_"$TT"_"$W"ac"$X$M"_setup.log"
	  done
      done
  done
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Carve for Generation $X for $SP
      for TT in ${TALL[@]}; do # loop over states
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP"_"$TT"_"$W"ac_mlclus"
          # carve the input trajectory
	  for UU in ${UALL[@]}; do # loop over U and Q
              python ../$scr mlclus_setup $SP $TT"_"$W"ac"$X$M"_"$UU | tee -a $SP"_"$TT"_"$W"ac"$X$M"_"$UU"_mlclus_carve.log"
           done
	  cd $origdir
      done
  done
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Run for Generation $X for $SP
      for TT in ${TALL[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP"_"$TT"_"$W"ac_mlclus"
	  # submit the cluster jobs for U and Q
          sbatch --wait --array=0-$((NCQ-1)):$SMAX $SP"_"$TT"_"$W"ac"$X$M"_"${UALL[0]}"_sub" &
          sbatch --wait --array=0-$((NC-1)):$SMAX $SP"_"$TT"_"$W"ac"$X$M"_"${UALL[1]}"_sub" &
	  cd $origdir
      done
  done
  wait
  for SP in ${SALL[@]}; do # loop over seeds
      echo Clusters Assemble Generation $X for $SP
      for TT in ${TALL[@]}; do # loop over targets
	  if [ $SP == ${SALL[NS-1]} ] && [ $TT == ${TALL[NT-1]} ]; then continue; fi
          # move to clusters directory
          cd $SP$"_"$TT"_"$W"ac_mlclus"
	  # assemble the completed trajectories
	  for UU in ${UALL[@]}; do
	      python ../$scr mlclus $SP $TT"_"$W"ac"$X$M"_"$UU | tee -a $SP"_"$TT"_"$W"ac"$X$M"_"$UU"_mlclus_assemble.log"
	  done
          cd $origdir
      done
  done
  # test the calculators on the assembled trajectory
  echo Testing for Generation $X for $SA calculators
  for TT in ${TALL[@]}; do
      sbatch --wait --array=$((X*10))-$((X*10+C-1)) $SA"_"$TT"_"$W"ac"$M"_mltest_sub" &
  done
  wait
done
